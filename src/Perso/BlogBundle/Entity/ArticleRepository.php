<?php

namespace Perso\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	public function getArticles($page,$nbPerPage,$admin = false) {
		$qb = $this->createQueryBuilder('a');
		if (!$admin) {
			$qb
			  ->where('a.statut = :statut')
			  ->setParameter('statut', '1')
			;
		}
		$qb
			-> leftJoin('a.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.published = 1')
			//-> orderBy('com.date', 'ASC')
			-> addSelect('com')
			-> orderBy("a.datecreate", "DESC")
			-> addOrderBy("com.date", "DESC")
		;
		$qb
		  // On définit l'annonce à partir de laquelle commencer la liste
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;
		
		return new Paginator($qb, true);
	}
	
	public function getArticleWithCategories(array $categoryNames) {
		$qb = $this->createQueryBuilder('a');
		$qb
			->where('a.statut = 1')
			//->setParameter('statut', '1')
		;
		$qb
			-> leftJoin('a.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.published = 1')
			-> addSelect('com')
		;
	 
		// On fait une jointure avec l'entité Category avec pour alias « c »
		$qb
		  ->join('a.categories', 'c')
		  ->addSelect('c')
		;
	
		// Puis on filtre sur le nom des catégories à l'aide d'un IN
		$qb->where($qb->expr()->in('c.name', $categoryNames));
		// La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine
	
		// Enfin, on retourne le résultat
		return $qb
		  ->getQuery()
		  ->getResult()
		;
	}
	
	public function getArticleBySlug($slug,$admin = false) {
		$qb = $this->createQueryBuilder('a');
		$qb
			->where('a.slug = :slug')
			->setParameter('slug', $slug)
		;
		/*if (!$admin) {
			$qb
			  ->andWhere('a.statut = :statut')
			  ->setParameter('statut', '1')
			;
		}*/
		$qb
			-> leftJoin('a.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.published = 1')
			-> addSelect('com')
		;
	
		// Enfin, on retourne le résultat
		return $qb
		  ->getQuery()
		  ->getResult()
		;
	}
}
